 ------
 OAuth Authentication for JAX-RS Resources
 ------
 Yegor Bugayenko
 ------
 2013-03-15
 ------

~~
~~ Copyright (c) 2011-2013, ReXSL.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the ReXSL.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

OAuth Authentication for JAX-RS Resources

  Authentication in a RESTful API/interface/website can be implemented
  only by means of
  {{{http://en.wikipedia.org/wiki/HTTP_cookie}HTTP cookies}}. An authenticated
  user makes HTTP requests to the server with authentication cookies inside.
  The cookie shall contain the name of the user in an encrypted format, to
  prevent a stranger from faking user identity, since encryption method,
  secret key, and "cryptographic salt" are not disclosed.

  Only the server can generate an authentication cookie, when user identity is verified
  and provided by an authentication provider. The most popular authentication
  protocol is {{{http://oauth.net/}OAuth}},
  used by major providers like
  {{{http://developers.facebook.com/docs/reference/dialogs/oauth/}Facebook}} and
  {{{https://developers.google.com/accounts/docs/OAuth2}Google}}.

  {{{./apidocs-${project.version}/com/rexsl/page/auth/AuthInset.html}<<<AuthInset>>>}}
  helps to manage OAuth authentication. First, make sure your base
  JAX-RS resource has a
  {{{./apidocs-${project.version}/com/rexsl/page/Inset.html}<<<@Inset.Runtime>>>}}-annotated
  method that returns an instance of <<<AuthInset>>>:

+--
public abstract class BaseRs extends BaseResource {
  @Inset.Runtime
  public final AuthInset auth() {
    return new AuthInset(this, "secret-key", "salt")
        .with(new Facebook(this, "3f54a...", "a4fe5s..."))
        .with(new Google(this, "7395..", "7auajs..."));
  }
}
+--

  Once it's done, every page of your site will be rendered with the
  following <<<<link\>>>> elements inside <<<<links\>>>> group:

+--
<page>
  <links>
    <link rel="auth-facebook" href="https://www.facebook.com/dial..." />
    <link rel="auth-google" href="https://accounts.google.com/o/oaut..." />
    ... other links ...
  </links>
</page>
+--

  When one of the links above is clicked, the user will be forwarded to the
  authentication page of the provider (Facebook, Google, etc.). When
  authenticated, the user comes back to your website with a secret
  code generated by the provider. The inset sends an HTTP request to the provider
  to fetch necessary identity information, like unique ID, full name, and
  a personal photo.

  Then, the inset redirects the user to the original page,
  and adds an authentication cookie. Besides that, the page gets this data:

+--
<page>
  <identity>
    <urn>urn:facebook:54321</urn>
    <name>John Doe</name>
    <photo>http://images.facebook.com/...</photo>
  </identity>
</page>
+--

  Also, you can get an access to the authenticated identity:

+--
public final class IndexRs extends BaseRs {
  public String name() {
    if (this.auth().identity().equals(Identity.ANONYMOUS)) {
      return "unknown";
    } else {
      return this.auth().identity().name();
    }
  }
}
+--

  URN of identity is created by authentication providers and consists
  of namespace ID (<<<"facebook">>> for Facebook and <<<"google">>> for Google)
  and namespace specific string with a unique ID of the user, as defined
  by the provider. You can use this URN as a unique identifier of the user
  in your system. It is always unique.

  When a user is not authenticated <<<AuthInset#identity()>>> method returns
  <<<Identity.ANONYMOUS>>>.
